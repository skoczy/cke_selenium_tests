/**
 * Copyright (c) 2015 Statoil Fuel & Retail ASA
 * All rights reserved.
 *
 * This code is proprietary and the property of Statoil Fuel & Retail ASA. It may not be
 * distributed without written permission from Statoil Fuel & Retail ASA.
 */

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        credentials {
            username 'botenannasfr'
            password '8f57fc4c2c2e44f2080ffae1771a288e2ed762ac'
        }
        url 'http://dl.bintray.com/statoilfuelretail/maven/'
    }
}


group = 'sfr'
version = new sfr.gradle.core.ProjectVersion(1, 0, "2-" + System.env.BUILD_NUMBER + "-commit-" + System.env.GITCOMMITID)
def version_api = 1

apply plugin: 'java'
apply plugin: 'groovy'

configurations {
    jaxDoclet
    data
    jetty
    integrationTestCompile
    integrationTestCompile.extendsFrom testCompile
    querydslapt
}

sourceSets {

    generated {
        compileClasspath += sourceSets.main.compileClasspath
    }

    main {
        compileClasspath += sourceSets.generated.output
    }

    data {
        groovy.srcDirs = ['src/data/groovy']
        resources.srcDirs = ['src/data/resources']
        compileClasspath += sourceSets.main.compileClasspath + sourceSets.main.output + configurations.data
        runtimeClasspath = output + compileClasspath + sourceSets.main.runtimeClasspath + sourceSets.data.resources
    }

    integrationTest {
        java.srcDirs = ['src/integrationTest/java']
        groovy.srcDirs = ['src/integrationTest/groovy']
        resources.srcDirs = ['src/integrationTest/resources']
        compileClasspath += sourceSets.main.compileClasspath + sourceSets.main.output + sourceSets.test.output +
                sourceSets.data.output + sourceSets.data.compileClasspath + sourceSets.integrationTest.resources
        runtimeClasspath = output + compileClasspath + sourceSets.main.runtimeClasspath + sourceSets.integrationTest.resources
    }
}

def versions = [
        groovy  : '2.4.4',
        api     : '2.1.88',
        jetty   : '9.3.3.v20150827',
        cxf     : '3.1.3',
        wslite  : '1.1.2',
        rxjava  : '1.0.14',
        rxgroovy: '1.0.0',
        metrics : '3.1.0',
        swagger : '1.5.0'
]

dependencies {
    compile "sfr.api:api-core:${versions.api}"
    compile "sfr.api:jpa:${versions.api}"
    compile "sfr.api:auth:${versions.api}"
    compile "io.reactivex:rxjava:${versions.rxjava}"
    compile("io.reactivex:rxgroovy:${versions.rxgroovy}") { exclude group: 'org.codehaus.groovy', module: 'groovy-all' }
    compile "org.apache.httpcomponents:httpasyncclient:4.1"
    compile "io.reactivex:rxapache-http:0.21.1-dev.1+0.x-SNAPSHOT"
    compile 'commons-codec:commons-codec:1.9'
    compile 'org.apache.commons:commons-lang3:3.1'
    compile 'javax.validation:validation-api:1.1.0.Final'
    compile "org.apache.cxf:cxf-rt-frontend-jaxws:${versions.cxf}"
    compile "com.github.groovy-wslite:groovy-wslite:${versions.wslite}"
    compile "org.codehaus.groovy:groovy-all:${versions.groovy}"
    compile 'de.danielbechler:java-object-diff:0.93'
    compile 'org.hibernate:hibernate-envers:5.0.3.Final'
    compile 'org.glassfish.jersey.ext:jersey-bean-validation:2.22.1'
    runtime 'org.hibernate:hibernate-validator:5.2.1.Final'
    runtime "sfr.api:api-core:${versions.api}"
    runtime "sfr.api:jpa:${versions.api}"
    runtime 'commons-codec:commons-codec:1.9'
    runtime 'org.apache.commons:commons-lang3:3.1'
    runtime 'org.hibernate:hibernate-tools:4.3.1.Final'


    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.4.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.4.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.4.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.4.1'
//    compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.4.1'

    runtime 'com.google.code.gson:gson:1.7.2'
    runtime "org.apache.httpcomponents:httpasyncclient:4.1"
    runtime 'de.danielbechler:java-object-diff:0.93'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.10.8'
    testCompile 'net.jodah:typetools:0.3.1'
    testCompile "org.apache.cxf:cxf-rt-frontend-jaxws:${versions.cxf}"
    testCompile "com.github.groovy-wslite:groovy-wslite:${versions.wslite}"
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:3.2.0'

    integrationTestCompile "org.codehaus.groovy:groovy-all:${versions.groovy}"
    integrationTestCompile 'junit:junit:4.11'
    integrationTestCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    integrationTestCompile 'org.hamcrest:hamcrest-core:1.2'
    integrationTestCompile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7+'
    integrationTestCompile "cglib:cglib-nodep:2.2"          // allows mocking of classes (in addition to interfaces)
    integrationTestCompile "org.objenesis:objenesis:1.2"
    // allows mocking of classes without default constructor (together with CGLIB)

    data 'com.opencsv:opencsv:3.5'
    data 'org.liquibase:liquibase-core:3.3.2'
    data 'org.liquibase:liquibase-groovy-dsl:1.1.1'

    compile 'commons-cli:commons-cli:1.3.1'
    compile "org.eclipse.jetty:jetty-server:${versions.jetty}"
    compile "org.eclipse.jetty:jetty-servlet:${versions.jetty}"
    compile "org.eclipse.jetty:jetty-servlets:${versions.jetty}"
    compile "io.dropwizard.metrics:metrics-core:${versions.metrics}"
    compile "io.dropwizard.metrics:metrics-servlets:${versions.metrics}"
    compile "io.dropwizard.metrics:metrics-jetty9:${versions.metrics}"
    compile "io.dropwizard.metrics:metrics-jersey2:${versions.metrics}"
    compile "io.dropwizard.metrics:metrics-jvm:${versions.metrics}"
    compile "io.swagger:swagger-jersey2-jaxrs:${versions.swagger}"
    compile 'org.postgresql:postgresql:9.4-1202-jdbc42'

    querydslapt 'com.mysema.querydsl:querydsl-apt:2.7.1'
}

compileJava {
    options.fork = false
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:all" << "-Werror"
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

task javaSettings << { task ->
    println "$task.project.name"
    println "fork=$task.project.compileJava.options.fork"
    println "encoding=$task.project.compileJava.options.encoding"
    println "source=$task.project.compileJava.sourceCompatibility"
    println "target=$task.project.compileJava.targetCompatibility"
}
classes.dependsOn javaSettings

processResources {
    filesMatching("**/*.properties") {
        expand(
                app_version: project.version.toString(),
                api_version: version_api.toString(),
                app_name: project.name,
                app_timestamp: new Date()
        )
    }
}

test {
    include 'com/sfr/**/unit/**/*Test.class'
    include 'com/sfr/**/unit/**/*Tests.class'
    include 'com/sfr/**/unit/**/*Specification.class'
    exclude '**/*BaseTests.class'
    exclude '**/*BaseTest.class'
    exclude '**/*TestBase.class'
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }
}

task generateRestApiDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("rest-api-docs")
}

task run(type: JavaExec, dependsOn: build) {
    systemProperties System.getProperties()
    classpath += sourceSets.main.runtimeClasspath + sourceSets.generated.output
    main = "com.sfr.sitemaster.app.SitemasterServer"
    args '-contentRoot', 'src/ui/build'
}

gradle.taskGraph.whenReady { taskGraph ->
    tasks.compileJava.enabled = false
    tasks.compileGeneratedGroovy.enabled = false
}
apply from: "tasks/analysis.gradle"
apply from: "tasks/fatJar.gradle"
apply from: "tasks/frontend.gradle"
apply from: "tasks/ide.gradle"
apply from: "tasks/importCSV.gradle"
apply from: "tasks/integrationTest.gradle"
apply from: "tasks/liquibase.gradle"
apply from: "tasks/querydsl.gradle"
